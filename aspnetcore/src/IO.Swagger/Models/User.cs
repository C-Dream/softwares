/*
 * Active Directory API Of HSBC
 *
 * 名称：活动目录API。   工具：[swagger](http://swagger.io)   规范：[openapi v3.0.0](https://www.openapis.org/)   
 *
 * OpenAPI spec version: 1.8.0
 * Contact: cloudy.w.h.luo@hsbc.com.cn
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class User : IEquatable<User>
    { 
        /// <summary>
        /// 状态码
        /// </summary>
        /// <value>状态码</value>
        [DataMember(Name="code")]
        public int? Code { get; set; }

        /// <summary>
        /// 返回提示
        /// </summary>
        /// <value>返回提示</value>
        [DataMember(Name="msg")]
        public string Msg { get; set; }

        /// <summary>
        /// 用户全名
        /// </summary>
        /// <value>用户全名</value>
        [DataMember(Name="fullname")]
        public string Fullname { get; set; }

        /// <summary>
        /// 用户组列表
        /// </summary>
        /// <value>用户组列表</value>
        [DataMember(Name="groups")]
        public string Groups { get; set; }

        /// <summary>
        /// 邮箱
        /// </summary>
        /// <value>邮箱</value>
        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// 授权码
        /// </summary>
        /// <value>授权码</value>
        [DataMember(Name="token")]
        public string Token { get; set; }

        /// <summary>
        /// 授权时间
        /// </summary>
        /// <value>授权时间</value>
        [DataMember(Name="timestamp")]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  Fullname: ").Append(Fullname).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((User)obj);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="other">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Msg == other.Msg ||
                    Msg != null &&
                    Msg.Equals(other.Msg)
                ) && 
                (
                    Fullname == other.Fullname ||
                    Fullname != null &&
                    Fullname.Equals(other.Fullname)
                ) && 
                (
                    Groups == other.Groups ||
                    Groups != null &&
                    Groups.Equals(other.Groups)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    Token == other.Token ||
                    Token != null &&
                    Token.Equals(other.Token)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Msg != null)
                    hashCode = hashCode * 59 + Msg.GetHashCode();
                    if (Fullname != null)
                    hashCode = hashCode * 59 + Fullname.GetHashCode();
                    if (Groups != null)
                    hashCode = hashCode * 59 + Groups.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (Token != null)
                    hashCode = hashCode * 59 + Token.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(User left, User right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(User left, User right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
